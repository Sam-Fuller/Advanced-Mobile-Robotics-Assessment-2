/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Aria;

public class ArRetFunctor_Bool extends ArFunctor {
  /* (begin code from javabody_derived typemap) */

  private long swigCPtr;

  /* for internal use by swig only */
  public ArRetFunctor_Bool(long cPtr, boolean cMemoryOwn) {
    super(AriaJavaJNI.SWIGArRetFunctor_BoolUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArRetFunctor_Bool obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /* (end code from javabody_derived typemap) */

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArRetFunctor_Bool(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    AriaJavaJNI.ArRetFunctor_Bool_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    AriaJavaJNI.ArRetFunctor_Bool_change_ownership(this, swigCPtr, true);
  }

  public void invoke() {
    if (getClass() == ArRetFunctor_Bool.class) AriaJavaJNI.ArRetFunctor_Bool_invoke(swigCPtr, this); else AriaJavaJNI.ArRetFunctor_Bool_invokeSwigExplicitArRetFunctor_Bool(swigCPtr, this);
  }

  public boolean invokeR() {
    return AriaJavaJNI.ArRetFunctor_Bool_invokeR(swigCPtr, this);
  }

  public ArRetFunctor_Bool() {
    this(AriaJavaJNI.new_ArRetFunctor_Bool(), true);
    AriaJavaJNI.ArRetFunctor_Bool_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
