/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*;
public class ArServerHandlerMapping {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  /* for internal use by swig only */
  public ArServerHandlerMapping(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArServerHandlerMapping obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArNetworkingJavaJNI.delete_ArServerHandlerMapping(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArServerHandlerMapping(ArServerBase server, ArRobot robot, ArLaser laser, String baseDirectory, String tempDirectory, boolean useReflectorValues, ArLaser laser2, String sickSuffix, String sick2Suffix) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMapping__SWIG_0(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, ArLaser.getCPtr(laser), laser, baseDirectory, tempDirectory, useReflectorValues, ArLaser.getCPtr(laser2), laser2, sickSuffix, sick2Suffix), true);
  }

  public ArServerHandlerMapping(ArServerBase server, ArRobot robot, ArLaser laser, String baseDirectory, String tempDirectory, boolean useReflectorValues, ArLaser laser2, String sickSuffix) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMapping__SWIG_1(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, ArLaser.getCPtr(laser), laser, baseDirectory, tempDirectory, useReflectorValues, ArLaser.getCPtr(laser2), laser2, sickSuffix), true);
  }

  public ArServerHandlerMapping(ArServerBase server, ArRobot robot, ArLaser laser, String baseDirectory, String tempDirectory, boolean useReflectorValues, ArLaser laser2) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMapping__SWIG_2(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, ArLaser.getCPtr(laser), laser, baseDirectory, tempDirectory, useReflectorValues, ArLaser.getCPtr(laser2), laser2), true);
  }

  public ArServerHandlerMapping(ArServerBase server, ArRobot robot, ArLaser laser, String baseDirectory, String tempDirectory, boolean useReflectorValues) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMapping__SWIG_3(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, ArLaser.getCPtr(laser), laser, baseDirectory, tempDirectory, useReflectorValues), true);
  }

  public ArServerHandlerMapping(ArServerBase server, ArRobot robot, ArLaser laser, String baseDirectory, String tempDirectory) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMapping__SWIG_4(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, ArLaser.getCPtr(laser), laser, baseDirectory, tempDirectory), true);
  }

  public ArServerHandlerMapping(ArServerBase server, ArRobot robot, ArLaser laser, String baseDirectory) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMapping__SWIG_5(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, ArLaser.getCPtr(laser), laser, baseDirectory), true);
  }

  public ArServerHandlerMapping(ArServerBase server, ArRobot robot, ArLaser laser) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMapping__SWIG_6(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, ArLaser.getCPtr(laser), laser), true);
  }

  public void serverMappingStart(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_serverMappingStart(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void serverMappingEnd(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_serverMappingEnd(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void serverMappingStatus(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_serverMappingStatus(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public boolean isMapping() {
    return ArNetworkingJavaJNI.ArServerHandlerMapping_isMapping(swigCPtr, this);
  }

  public String getFileName() {
    return ArNetworkingJavaJNI.ArServerHandlerMapping_getFileName(swigCPtr, this);
  }

  public String getMapName() {
    return ArNetworkingJavaJNI.ArServerHandlerMapping_getMapName(swigCPtr, this);
  }

  public void addSimpleCommands(ArServerHandlerCommands handlerCommands) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addSimpleCommands(swigCPtr, this, ArServerHandlerCommands.getCPtr(handlerCommands), handlerCommands);
  }

  public void simpleLoopStart(ArArgumentBuilder arg) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_simpleLoopStart(swigCPtr, this, ArArgumentBuilder.getCPtr(arg), arg);
  }

  public void simpleLoopEnd(ArArgumentBuilder arg) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_simpleLoopEnd(swigCPtr, this, ArArgumentBuilder.getCPtr(arg), arg);
  }

  public void addStringForStartOfLogs(String str, ArListPos.Pos position) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addStringForStartOfLogs__SWIG_0(swigCPtr, this, str, position.swigValue());
  }

  public void addStringForStartOfLogs(String str) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addStringForStartOfLogs__SWIG_1(swigCPtr, this, str);
  }

  public void remStringForStartOfLogs(String str) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_remStringForStartOfLogs(swigCPtr, this, str);
  }

  public void addTagToLog(String str) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addTagToLog(swigCPtr, this, str);
  }

  public void addInfoToLog(String str) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addInfoToLog(swigCPtr, this, str);
  }

  public boolean addLocationData(String name, SWIGTYPE_p_ArRetFunctor2T_int_ArTime_ArPose_p_t functor) {
    return ArNetworkingJavaJNI.ArServerHandlerMapping_addLocationData(swigCPtr, this, name, SWIGTYPE_p_ArRetFunctor2T_int_ArTime_ArPose_p_t.getCPtr(functor));
  }

  public void addMappingStartCallback(ArFunctor functor, ArListPos.Pos position) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addMappingStartCallback__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addMappingStartCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addMappingStartCallback__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remMappingStartCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_remMappingStartCallback(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addMappingEndCallback(ArFunctor functor, ArListPos.Pos position) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addMappingEndCallback__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addMappingEndCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addMappingEndCallback__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remMappingEndCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_remMappingEndCallback(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addPreMoveCallback(ArFunctor functor, ArListPos.Pos position) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addPreMoveCallback__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addPreMoveCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addPreMoveCallback__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remPreMoveCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_remPreMoveCallback(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addPostMoveCallback(ArFunctor functor, ArListPos.Pos position) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addPostMoveCallback__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addPostMoveCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addPostMoveCallback__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remPostMoveCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_remPostMoveCallback(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public boolean packetHandler(ArRobotPacket packet) {
    return ArNetworkingJavaJNI.ArServerHandlerMapping_packetHandler(swigCPtr, this, ArRobotPacket.getCPtr(packet), packet);
  }

  public SWIGTYPE_p_std__mapT_std__string_ArRetFunctor2T_int_ArTime_ArPose_p_t_p_ArStrCaseCmpOp_t getLocationDataMap() {
    long cPtr = ArNetworkingJavaJNI.ArServerHandlerMapping_getLocationDataMap(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__mapT_std__string_ArRetFunctor2T_int_ArTime_ArPose_p_t_p_ArStrCaseCmpOp_t(cPtr, false);
  }

  public void addStringsForStartOfLogToMap(ArMap arMap) {
    ArNetworkingJavaJNI.ArServerHandlerMapping_addStringsForStartOfLogToMap(swigCPtr, this, ArMap.getCPtr(arMap), arMap);
  }

}
