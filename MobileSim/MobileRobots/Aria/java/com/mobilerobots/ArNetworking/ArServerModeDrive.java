/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*;
public class ArServerModeDrive extends ArServerMode {
  private long swigCPtr;

  /* for internal use by swig only */
  public ArServerModeDrive(long cPtr, boolean cMemoryOwn) {
    super(ArNetworkingJavaJNI.SWIGArServerModeDriveUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArServerModeDrive obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArNetworkingJavaJNI.delete_ArServerModeDrive(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ArServerModeDrive(ArServerBase server, ArRobot robot, boolean takeControlOnJoystick) {
    this(ArNetworkingJavaJNI.new_ArServerModeDrive__SWIG_0(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, takeControlOnJoystick), true);
  }

  public ArServerModeDrive(ArServerBase server, ArRobot robot) {
    this(ArNetworkingJavaJNI.new_ArServerModeDrive__SWIG_1(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot), true);
  }

  public void activate() {
    ArNetworkingJavaJNI.ArServerModeDrive_activate(swigCPtr, this);
  }

  public void deactivate() {
    ArNetworkingJavaJNI.ArServerModeDrive_deactivate(swigCPtr, this);
  }

  public void addControlCommands(ArServerHandlerCommands handlerCommands) {
    ArNetworkingJavaJNI.ArServerModeDrive_addControlCommands(swigCPtr, this, ArServerHandlerCommands.getCPtr(handlerCommands), handlerCommands);
  }

  public void driveJoystick(double vel, double rotVel, boolean isActivating) {
    ArNetworkingJavaJNI.ArServerModeDrive_driveJoystick__SWIG_0(swigCPtr, this, vel, rotVel, isActivating);
  }

  public void driveJoystick(double vel, double rotVel) {
    ArNetworkingJavaJNI.ArServerModeDrive_driveJoystick__SWIG_1(swigCPtr, this, vel, rotVel);
  }

  public void serverDriveJoystick(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerModeDrive_serverDriveJoystick(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void userTask() {
    ArNetworkingJavaJNI.ArServerModeDrive_userTask(swigCPtr, this);
  }

  public void setThrottleParams(int lowSpeed, int highSpeed) {
    ArNetworkingJavaJNI.ArServerModeDrive_setThrottleParams(swigCPtr, this, lowSpeed, highSpeed);
  }

  public ArActionGroup getActionGroup() {
    long cPtr = ArNetworkingJavaJNI.ArServerModeDrive_getActionGroup(swigCPtr, this);
    return (cPtr == 0) ? null : new ArActionGroup(cPtr, false);
  }

  public void setSafeDriving(boolean safe) {
    ArNetworkingJavaJNI.ArServerModeDrive_setSafeDriving(swigCPtr, this, safe);
  }

  public boolean getSafeDriving() {
    return ArNetworkingJavaJNI.ArServerModeDrive_getSafeDriving(swigCPtr, this);
  }

  public void setExtraUnsafeAction(ArAction action) {
    ArNetworkingJavaJNI.ArServerModeDrive_setExtraUnsafeAction(swigCPtr, this, ArAction.getCPtr(action), action);
  }

}
